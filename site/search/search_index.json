{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"joshIsDev Docs","text":"<p>Documentation generated with mkdocs.org and Material theme</p>"},{"location":"#about","title":"About","text":"<p>These docs are for my personal reference on programming related subjects, which I leave public. I'm interested in web development, so most of my documentation here is about that journey.</p>"},{"location":"#front-end-web","title":"Front-end web","text":""},{"location":"#bootstrap","title":"Bootstrap","text":"<p>Modern CSS framework for quickly making web-pages using pre-made components and CSS utilities.</p>"},{"location":"#sass","title":"Sass","text":"<p>CSS pre-processor that brings Object Oriented Programming patterns to CSS.</p>"},{"location":"#back-end","title":"Back-end","text":""},{"location":"#django","title":"Django","text":"<p>Batteries included web framework for rapid development with Python using MVT, similar to MVC, to create web applications.</p>"},{"location":"#other","title":"Other","text":""},{"location":"#vim","title":"Vim","text":"<p>Fantastically efficient text editor commonly used by programmers.</p>"},{"location":"Bootstrap/","title":"Bootstrap","text":""},{"location":"Bootstrap/#about","title":"About","text":"<p>Bootstrap is the most popular CSS framework, most well known for it's responsive grid system that makes designing for multiple screensizes easy. Bootstrap css is mainly used by applying classes to your elemtents, which correspond to bootstrap's CSS styles. Bootstrap uses SASS, specifically scss, which can be customized depending on your delivery method for bootstrap. bootstrap can be installed with npm, accessed through a content delivery network, and mre. bootstrap is also well known for responsive navs, styled inputs, spacing utilities, many custom components, and more.</p>"},{"location":"Bootstrap/#card","title":"Card","text":""},{"location":"Bootstrap/#grid","title":"Grid","text":"<p>Bootstrap grid uses flexbox for responsive placement of elements. It uses containers which can contain multiple rows of content. Each row gets 12 column units that can be divided among elements using bootstrap classes. Grid also allows you to specify flex properties using classes, which further helps position elements.</p>"},{"location":"Bootstrap/#input-elements","title":"Input elements","text":"<p>Bootstrap has default styling for many inputs, but you can specify these inputs with specific bootstrap classes for better styling</p>"},{"location":"Bootstrap/#typography","title":"Typography","text":"<p>Bootstrap helps you style text with default styles and utility classes</p>"},{"location":"Bootstrap/#images","title":"images","text":"<p>Create responsive images and place them</p>"},{"location":"Bootstrap/#utils","title":"Utils","text":""},{"location":"Bootstrap/#icons","title":"Icons","text":""},{"location":"Bootstrap/#navbar","title":"Navbar","text":"<pre><code>&lt;nav class=\"navbar navbar-expand-lg bg-body-tertiary\"&gt;\n  &lt;div class=\"container-fluid\"&gt;\n    &lt;a class=\"navbar-brand\" href=\"#\"&gt;Navbar&lt;/a&gt;\n    &lt;button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\n      &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n    &lt;/button&gt;\n    &lt;div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"&gt;\n      &lt;ul class=\"navbar-nav me-auto mb-2 mb-lg-0\"&gt;\n        &lt;li class=\"nav-item\"&gt;\n          &lt;a class=\"nav-link active\" aria-current=\"page\" href=\"#\"&gt;Home&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li class=\"nav-item\"&gt;\n          &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li class=\"nav-item dropdown\"&gt;\n          &lt;a class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"&gt;\n            Dropdown\n          &lt;/a&gt;\n          &lt;ul class=\"dropdown-menu\"&gt;\n            &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\"&gt;Action&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\"&gt;Another action&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;hr class=\"dropdown-divider\"&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a class=\"dropdown-item\" href=\"#\"&gt;Something else here&lt;/a&gt;&lt;/li&gt;\n          &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li class=\"nav-item\"&gt;\n          &lt;a class=\"nav-link disabled\" aria-disabled=\"true\"&gt;Disabled&lt;/a&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;form class=\"d-flex\" role=\"search\"&gt;\n        &lt;input class=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"&gt;\n        &lt;button class=\"btn btn-outline-success\" type=\"submit\"&gt;Search&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/nav&gt;\n</code></pre>"},{"location":"Bootstrap/Grid/","title":"Grid","text":""},{"location":"Bootstrap/Grid/#breakpoints","title":"Breakpoints","text":"<p>Bootstrap has multiple content breakpoints to change how content displays at different  - <code>sm</code> - phone size - <code>md</code> - portrait tablet - <code>lg</code> - small desktop of landscape tablet - <code>xl</code> large desktop - <code>xxl</code> extra large desktop These breakpoints are used in multiple places to specify how content is displayed based on screen size</p> <p>breakpoints will be shown in examples using <code>&lt;bp&gt;</code></p>"},{"location":"Bootstrap/Grid/#containers","title":"Containers","text":"<p>Containers specify the main content in a page - <code>container</code> - A responsize container that leaves room on the sides on larger displays - <code>container-fluid</code> - container taking full width on all screens - <code>container-&lt;bp&gt;</code> - container leaving room on the sides at and above specifyed breakpoint</p>"},{"location":"Bootstrap/Grid/#rows","title":"Rows","text":"<ul> <li><code>row</code> - rows go inside containers and define a row of content which gets 12 <code>col</code> units</li> </ul>"},{"location":"Bootstrap/Grid/#cols","title":"Cols","text":"<p><code>col</code> is used to specify the number of columns an element gets in it's row - <code>col-&lt;x&gt;</code> - defines element that takes up x col units, up to 12 - <code>col-&lt;bp&gt;-&lt;x&gt;</code> - defines element that takes up a whole row until specifyed breakpoint, where x is the amount of <code>col</code> units it takes up at and above that breakpoint - <code>col-auto</code> - element automatically takes up <code>col</code> units based on size</p>"},{"location":"Bootstrap/Grid/#flex-utils","title":"Flex Utils","text":"<ul> <li><code>justify-content-start</code>, specifies CSS justify content property, how content is justified on main axis.  Other justifies can be set using <code>end</code>, <code>center</code></li> <li><code>gx-5</code> - remove content gutters up to five</li> <li><code>align-items-center</code> Specify align items property</li> <li></li> </ul>"},{"location":"Bootstrap/Images/","title":"Images","text":""},{"location":"Bootstrap/Images/#img-responsive","title":"<code>img-responsive</code>","text":"<p>Creates a responsive image</p>"},{"location":"Bootstrap/Images/#foat-end","title":"<code>foat-end</code>","text":""},{"location":"Bootstrap/Images/#width-utils","title":"Width utils","text":"<ul> <li><code>w-25</code> - 25% width</li> <li><code>w-50</code></li> <li><code>w-75</code></li> <li><code>w-100</code> - 100% width</li> </ul>"},{"location":"Bootstrap/Images/#height-utils","title":"Height utils","text":"<ul> <li><code>w-25</code> - 25% height</li> <li><code>w-50</code></li> <li><code>w-75</code></li> <li><code>w-100</code> - 100% height</li> </ul>"},{"location":"Bootstrap/Images/#rounded","title":"<code>.rounded</code>","text":""},{"location":"Bootstrap/Input/","title":"Input","text":""},{"location":"Bootstrap/Input/#btn","title":"<code>btn</code>","text":"<p>Bootstrap class used to specify a button style element, which can be specified on <code>button</code> and <code>a</code> elements. Other <code>btn</code> properties can be specified by adding specific <code>btn</code> classes after <code>btn</code> class - <code>btn-primary</code> - specify colors among <code>primary</code>, <code>success</code>, <code>danger</code>, <code>dark</code>, and more - <code>btn-outline-primary</code> - hollow of outline colored <code>btn</code> with bootstrap colors - <code>btn-lg</code> - specify a <code>lg</code> or <code>sm</code> button</p>"},{"location":"Bootstrap/Input/#card","title":"<code>card</code>","text":"<p>Specify bootstrap card element which can contain the following pieces - <code>card-title</code> - title of card using an <code>h&lt;1-6&gt;</code> element - <code>card-subtitle</code> - subtitle of card using a heading element</p>"},{"location":"Bootstrap/Input/#card-body","title":"<code>card-body</code>","text":"<p>Specify following properties inside <code>card-body</code> div - <code>card-text</code>  - main paragraphs in a card using <code>p</code> element - <code>card-link</code> - link inside card</p>"},{"location":"Bootstrap/Input/#default-styles","title":"Default styles","text":"<p>Bootstrap has predefined styles for input elements, no need to style them</p>"},{"location":"Bootstrap/Typography/","title":"Typography","text":""},{"location":"Bootstrap/Typography/#text-muted-light-text","title":"<code>text-muted</code> - light text","text":""},{"location":"Bootstrap/Typography/#headings","title":"Headings","text":"<p>Bootstrap comes with default styles for heading elements, which helps make them responsive most importantly. This styling can be given to any element using <code>.h1</code> through <code>.h6</code> classes</p>"},{"location":"Bootstrap/Typography/#inline-text-elements","title":"Inline text elements","text":"<ul> <li><code>&lt;mark&gt;</code> or <code>.mark</code> - highlight text</li> <li><code>&lt;s&gt;</code> or <code>.text-decoration-line-through</code> - strikethrough</li> <li><code>&lt;small&gt;</code> or <code>.small</code>- small text</li> <li><code>&lt;strong&gt;</code> - bold</li> <li><code>&lt;em&gt;</code> - emphasized</li> </ul>"},{"location":"Bootstrap/Typography/#blockquote","title":"blockquote","text":"<p>Define blockquotes with and without captions <code>&lt;blockquote class=\"blockquote&gt;Quote here&lt;/bloukquote&gt;</code> - without caption</p> <p>or with caption:</p> <pre><code>&lt;figure&gt;\n    &lt;blockquote class=\"blockquote&gt;Quote here&lt;/blockquote&gt;\n    &lt;figcaption class=\"blockquote-caption\"&gt;- Author&lt;/figcaption\n&lt;/figure&gt;\n</code></pre>"},{"location":"Bootstrap/Utils/","title":"Utils","text":""},{"location":"Bootstrap/Utils/#spacing","title":"Spacing","text":"<p>Set spacing using <code>{property}{sides}-{size}</code> using the following options</p>"},{"location":"Bootstrap/Utils/#property","title":"property","text":"<ul> <li><code>m</code> - margin</li> <li><code>p</code> - padding</li> </ul>"},{"location":"Bootstrap/Utils/#sides","title":"Sides","text":"<p>Specify sides for property to be applied, default all 4 - <code>t</code> - top - <code>b</code> - bottom - <code>s</code> - start - <code>e</code> - end - <code>x</code> - horizontal - <code>y</code> - vertical</p>"},{"location":"Bootstrap/Utils/#sizes","title":"Sizes","text":"<p>Set sizes with regards to spacer, default is <code>1rem</code> - <code>1</code> - 0.25 spacers - <code>2</code> - half spacer - <code>3</code> -  one spacer - <code>4</code> - 1.5 spacers - <code>5</code> 3 spacers</p>"},{"location":"Bootstrap/Utils/#border","title":"Border","text":"<p>Set border with <code>border-top</code>. Using <code>top</code>, <code>bottom</code>, <code>end</code>, <code>start</code> , default is all. Use <code>-0</code> at the end to remove specific border</p>"},{"location":"Bootstrap/Utils/#border-color","title":"Border Color","text":"<p>Add <code>border-{color}</code> class</p>"},{"location":"Bootstrap/Utils/#text-color","title":"Text Color","text":"<p>Use <code>text-{color}</code></p>"},{"location":"Bootstrap/Utils/#badge","title":"<code>badge</code>","text":"<p>Add style your Reddit styled <code>badge</code> text element with: - <code>text-bg-{color}</code> Set both classes - <code>rounded-pill</code> - </p>"},{"location":"Django/","title":"About Django","text":""},{"location":"Django/#architecture","title":"Architecture","text":"<p>Django follows a MVT architecture which is similar to other web frameworks MVC architecture. MVT stands for Models, Views, and Templates, which are the main components of web apps written in Django. Django projects can also be made as or turned into API's with the Django Rest Framework. In actuallity, there is another large step to making apps in Django, which is defining URLs, although this part is commonly left out of the abbreviation. When a web user's browser makes a request to a Django site, the URLs route to the specified views, which use models as context to fill </p>"},{"location":"Django/#models","title":"Models","text":"<p>Models in Django define the fields in a database. Django uses an Object Relationship Mapper, ORM, to translate python code into database languages like sqlite, PostgreSQl, MySQL, MariaDB, and Oracle. Django comes with a sqlite3 database when starting a new django project, but the good part about the ORM is that all database code can be written in Python, meaning no need to rewrite when switching databases. they are defined in <code>models.py</code> as a Python class</p>"},{"location":"Django/#urls","title":"URLs","text":"<p>URLs in Django define the routes of your website, and define which views are used at these routes. They are defined in a Python List called <code>urlpatterns</code> in the urls.py file. Normal program structure is to have a <code>urls.py</code> file in your <code>django_project</code>, or main directory, and then include app URL patterns in the <code>urlpatterns</code> List, eg. <code>path(\"todos/\", include(\"todos.urls\"))</code>. Then in your Django apps you create a urls.py file with the same <code>urlpatterns</code> variable to define paths. These paths should include the url path (with a trailing slash) as a python string, the view this path uses, and a name for this route using the <code>name</code> keyword argument. All together, this might look like <code>path(\"about/\", AboutPageView.as_view(), name=\"about\"</code> The <code>name</code>  argument is important to include to reference this URL from other places in your Django project.</p>"},{"location":"Django/#views","title":"Views","text":"<p>Views in Django come in two flavors, Class-based and Function-based, which use Python classes and Functions. Class-based views inherit from generic Class-based views provided by Django like <code>TemplateView</code>, <code>ListView</code>, <code>DetailView</code>, <code>CreateView</code>, and more aptly named views. When using class based views you inherit attributes and methods from the derived class, and override some attributes and methods to craft the view to your needs..</p>"},{"location":"Django/#templates","title":"Templates","text":"<p>Django has it's own templating language to add \"Python\" to your html! This templating language intentionally doesn't let devs use actual python code, instead limiting them to use variables <code>{{ foo }}</code>, tags <code>{% bar %}</code>, and filters <code>{{foo|bar}}</code>.  While you are limited to only use Django Template Language, pieces, these pieces provides a wide selection to add programming logic to your html. You can also create your own tags and filters</p> \u00a9 Joshua Lent"},{"location":"Django/Forms/","title":"Forms","text":""},{"location":"Django/Models/","title":"Models","text":""},{"location":"Django/Templates/","title":"Templates","text":"<p>Django has a LOT of built in tags</p>"},{"location":"Django/Views/","title":"Views","text":""},{"location":"Django/Views/#class-based","title":"Class-based","text":""},{"location":"Django/Views/#attributes","title":"Attributes","text":""},{"location":"Django/Views/#template_name","title":"<code>template_name</code>","text":"<p>give path to the html template this view uses</p>"},{"location":"Django/Views/#context_object_name","title":"<code>context_object_name</code>","text":"<p>Specify the name of the context object being passed to a template, overrides default <code>object</code> or lowercase version of model name context object</p>"},{"location":"Django/Views/#function-based","title":"Function-based","text":"<p>Learn more on the official docs</p>"},{"location":"Sass/","title":"Sass","text":""},{"location":"Sass/#about","title":"About","text":"<p>Sass is a CSS preprocessor, which means you write sass code that gets transformed into browser-readable css. The most common variant of Sass is SCSS, which is a subset of CSS (all valid  CSS code is valid SCSS code), and this is the version this documentation is reffering to. To compile to CSS, developers use dart sass, which can be installed with npm. Sass's purpose is to add logic to CSS, similar to JavaScript, where styles can benefit from the DRY principle. Sass is one of the many answers to, how do we make writing CSS less painful?</p> <p>Sass has support for variables which is one of the reasons it became popular before CSS implemented them. Another feature that has now come to vanilla CSS that Sass started is CSS nesting, where a child selector (eg. <code>li</code>) can be placed within the brackets of a parent selector (eg. <code>ul</code>) to create a <code>ul li</code> CSS rule. </p>"},{"location":"Sass/#what-it-can-do","title":"What it can do","text":"<p>Sass's best features today are it's loops, if/else logic, inheritance, and OOP llke organization. It is used to create Bootstrap and can be used by developers to customize bootstrap, which is one of it's great uses today. </p>"},{"location":"Sass/#syntax","title":"Syntax","text":"<p>Basically everything in SCSS uses brackets like JavaScript to define blocks including, mixins, conditionals, and loops</p>"},{"location":"Sass/#variable","title":"<code>$variable</code>","text":"<p>Sass variables are defined using <code>$variable</code> syntax and referenced using the same <code>$variable</code> syntax</p>"},{"location":"Sass/#mixin","title":"<code>@mixin</code>","text":"<p>Sass let's you define \"mixins\", which are like functions for your css code. mixins can be added to a CSS rule to add the rules defined in the mixin to that rule. Mixins take arguments like functions. The syntax is <code>@mixin mixin-name($color: default) {}</code></p>"},{"location":"Sass/#if-else-if-else","title":"<code>@if</code> / <code>@else if</code> / <code>@else</code>","text":"<p>Sass lets you add logic to your program using conditionals: if, else if, and else statements.</p>"},{"location":"Vim/","title":"Vim","text":""},{"location":"Vim/#about","title":"About","text":"<p>Vim is a powerful text editor based on the Vi text editor. It is terminal based and popular for it's ability to work with test very fast. Instead of using arrow keys or a mouse to move around, you use <code>hjkl</code> like arrow keys, and have vims plentiful commands and vimmotions to help you move around even quicker. Everything in Vim is built around being able to be do everything from the keyboard using home-row/touch-typing. </p>"},{"location":"Vim/#common-commands","title":"Common Commands","text":"<p>So much in vim can be done with just a few commands. Don't worry about learning all commands at once, learn commands as you need them.</p>"},{"location":"Vim/#vimtutor-summaries","title":"Vimtutor summaries","text":"<p>Thanks to vimtutor for being a great starting guide for learning vim, this documentation uses parts of vimtutor in regards to structure and for explanations, check it out using <code>vimtutor</code> in terminal</p>"},{"location":"Vim/Common%20Commands/","title":"Common Commands","text":""},{"location":"Vim/Common%20Commands/#move-commands","title":"Move commands","text":"<p>To move the cursor, press the h,j,k,l keys as indicated. **</p> <pre><code>         ^              The k key moves up\n         k       Hint:  The h key is at the left and moves left.\n    &lt; h     l &gt;         The l key is at the right and moves right.\n         j              The j key looks like a down arrow.\n         v \n</code></pre>"},{"location":"Vim/Common%20Commands/#writing-text","title":"Writing text","text":"<ul> <li><code>i</code> - insert text</li> <li><code>a</code> - append text, insert after the cursor</li> <li><code>A</code> - append text to the end of the linex</li> </ul>"},{"location":"Vim/Common%20Commands/#editing-files","title":"Editing files","text":"<ul> <li><code>:w</code>- save</li> <li>`:q' - quit (without saving)</li> <li><code>:wq</code> - save and quite</li> <li><code>:wq</code> - save and quit, force action</li> </ul>"},{"location":"Vim/Common%20Commands/#motions","title":"Motions","text":"<p>Motions can be used to move around or paired with operators to perform actions - <code>w</code> - until the start of the next word, excluding its first character - <code>e</code> - until the end of the current word - <code>$</code> - to the end of the line</p>"},{"location":"Vim/Common%20Commands/#copy-paste","title":"Copy Paste","text":"<p>Vim has it's own visual mode to select text, where you can copy it and then paste it in your program - <code>v</code> - Enter visual mode where you can select text starting at your cursor - <code>y</code> - yank, or copy text that is selected in visual mode - <code>p</code> - paste text that has been yanked</p>"},{"location":"Vim/vimtutor_copy/","title":"Vimtutor copy","text":"<p>=============================================================================== =    W e l c o m e   t o   t h e   V I M   T u t o r    -    Version 1.7      = ===============================================================================</p> <pre><code> Vim is a very powerful editor that has many commands, too many to\n explain in a tutor such as this.  This tutor is designed to describe\n enough of the commands that you will be able to easily use Vim as\n an all-purpose editor.\n\n The approximate time required to complete the tutor is 30 minutes,\n depending upon how much time is spent with experimentation.\n\n ATTENTION:\n The commands in the lessons will modify the text.  Make a copy of this\n file to practice on (if you started \"vimtutor\" this is already a copy).\n\n It is important to remember that this tutor is set up to teach by\n use.  That means that you need to execute the commands to learn them\n properly.  If you only read the text, you will forget the commands!\n\n Now, make sure that your Caps-Lock key is NOT depressed and press\n the   j   key enough times to move the cursor so that lesson 1.1\n completely fills the screen.\n</code></pre> <pre><code>            Lesson 1.1:  MOVING THE CURSOR\n\n\n   ** To move the cursor, press the h,j,k,l keys as indicated. **\n         ^\n         k          Hint:  The h key is at the left and moves left.\n       &lt; h   l &gt;           The l key is at the right and moves right.\n         j             The j key looks like a down arrow.\n         v\n  1. Move the cursor around the screen until you are comfortable.\n\n  2. Hold down the down key (j) until it repeats.\n     Now you know how to move to the next lesson.\n\n  3. Using the down key, move to lesson 1.2.\n\nNOTE: If you are ever unsure about something you typed, press &lt;ESC&gt; to place\n      you in Normal mode.  Then retype the command you wanted.\n\nNOTE: The cursor keys should also work.  But using hjkl you will be able to\n      move around much faster, once you get used to it.  Really!\n\n</code></pre> <pre><code>            Lesson 1.2: EXITING VIM\n</code></pre> <p>!! NOTE: Before executing any of the steps below, read this entire lesson!!</p> <ol> <li> <p>Press the  key (to make sure you are in Normal mode). <li> <p>Type:  :q! .      This exits the editor, DISCARDING any changes you have made. <li> <p>Get back here by executing the command that got you into this tutor. That      might be:  vimtutor  <li> <p>If you have these steps memorized and are confident, execute steps      1 through 3 to exit and re-enter the editor.</p> </li> <p>NOTE:  :q!   discards any changes you made.  In a few lessons you        will learn how to save the changes to a file. <ol> <li>Move the cursor down to lesson 1.3.</li> </ol> <pre><code>             Lesson 1.3: TEXT EDITING - DELETION\n\n\n       ** Press  x  to delete the character under the cursor. **\n\n  1. Move the cursor to the line below marked ---&gt;.\n\n  2. To fix the errors, move the cursor until it is on top of the\n     character to be deleted.\n\n  3. Press the  x  key to delete the unwanted character.\n\n  4. Repeat steps 2 through 4 until the sentence is correct.\n\n---&gt; The ccow jumpedd ovverr thhe mooon.\n\n  5. Now that the line is correct, go on to lesson 1.4.\n\nNOTE: As you go through this tutor, do not try to memorize, learn by usage.\n\n\n\n</code></pre> <pre><code>          Lesson 1.4: TEXT EDITING - INSERTION\n\n\n        ** Press  i  to insert text. **\n</code></pre> <ol> <li> <p>Move the cursor to the first line below marked ---&gt;.</p> </li> <li> <p>To make the first line the same as the second, move the cursor on top      of the character BEFORE which the text is to be inserted.</p> </li> <li> <p>Press  i  and type in the necessary additions.</p> </li> <li> <p>As each error is fixed press  to return to Normal mode.      Repeat steps 2 through 4 to correct the sentence. <p>---&gt; There is text misng this . ---&gt; There is some text missing from this line.</p> <ol> <li>When you are comfortable inserting text move to lesson 1.5.</li> </ol> <pre><code>             Lesson 1.5: TEXT EDITING - APPENDING\n\n\n            ** Press  A  to append text. **\n\n  1. Move the cursor to the first line below marked ---&gt;.\n     It does not matter on what character the cursor is in that line.\n\n  2. Press  A  and type in the necessary additions.\n\n  3. As the text has been appended press &lt;ESC&gt; to return to Normal mode.\n\n  4. Move the cursor to the second line marked ---&gt; and repeat\n     steps 2 and 3 to correct this sentence.\n\n---&gt; There is some text missing from th\n     There is some text missing from this line.\n---&gt; There is also some text miss\n     There is also some text missing here.\n\n  5. When you are comfortable appending text move to lesson 1.6.\n\n</code></pre> <pre><code>         Lesson 1.6: EDITING A FILE\n\n        ** Use  :wq  to save a file and exit. **\n</code></pre> <p>!! NOTE: Before executing any of the steps below, read this entire lesson!!</p> <ol> <li> <p>If you have access to another terminal, do the following there.       Otherwise, exit this tutor as you did in lesson 1.2:  :q!</p> </li> <li> <p>At the shell prompt type this command:  vim file.txt       'vim' is the command to start the Vim editor, 'file.txt' is the name of      the file you wish to edit.  Use the name of a file that you can change. <li> <p>Insert and delete text as you learned in the previous lessons.</p> </li> <li> <p>Save the file with changes and exit Vim with:  :wq  <li> <p>If you have quit vimtutor in step 1 restart the vimtutor and move down to      the following summary.</p> </li> <li> <p>After reading the above steps and understanding them: do it.</p> </li> <pre><code>                   Lesson 1 SUMMARY\n\n\n  1. The cursor is moved using either the arrow keys or the hjkl keys.\n     h (left)   j (down)       k (up)       l (right)\n\n  2. To start Vim from the shell prompt type:  vim FILENAME &lt;ENTER&gt;\n\n  3. To exit Vim type:     &lt;ESC&gt;   :q!   &lt;ENTER&gt;  to trash all changes.\n         OR type:      &lt;ESC&gt;   :wq   &lt;ENTER&gt;  to save the changes.\n\n  4. To delete the character at the cursor type:  x\n\n  5. To insert or append text type:\n     i   type inserted text   &lt;ESC&gt;     insert before the cursor\n     A   type appended text   &lt;ESC&gt;         append after the line\n\nNOTE: Pressing &lt;ESC&gt; will place you in Normal mode or will cancel\n      an unwanted and partially completed command.\n\nNow continue with lesson 2.\n\n</code></pre> <pre><code>        Lesson 2.1: DELETION COMMANDS\n\n\n           ** Type  dw  to delete a word. **\n</code></pre> <ol> <li> <p>Press    to make sure you are in Normal mode. <li> <p>Move the cursor to the line below marked ---&gt;.</p> </li> <li> <p>Move the cursor to the beginning of a word that needs to be deleted.</p> </li> <li> <p>Type   dw   to make the word disappear.</p> </li> <p>NOTE: The letter  d  will appear on the last line of the screen as you type     it.  Vim is waiting for you to type  w .  If you see another character     than  d  you typed something wrong; press    and start over. <p>---&gt; There are a some words fun that don't belong paper in this sentence.</p> <ol> <li>Repeat steps 3 and 4 until the sentence is correct and go to lesson 2.2.</li> </ol> <pre><code>              Lesson 2.2: MORE DELETION COMMANDS\n\n\n       ** Type  d$  to delete to the end of the line. **\n\n  1. Press  &lt;ESC&gt;  to make sure you are in Normal mode.\n\n  2. Move the cursor to the line below marked ---&gt;.\n\n  3. Move the cursor to the end of the correct line (AFTER the first . ).\n\n  4. Type    d$    to delete to the end of the line.\n\n---&gt; Somebody typed the end of this line twice. end of this line twice.\n\n\n  5. Move on to lesson 2.3 to understand what is happening.\n\n\n\n\n\n</code></pre> <pre><code>         Lesson 2.3: ON OPERATORS AND MOTIONS\n</code></pre> <p>Many commands that change text are made from an operator and a motion.   The format for a delete command with the  d  delete operator is as follows:</p> <pre><code>d   motion\n</code></pre> <p>Where:     d      - is the delete operator.     motion - is what the operator will operate on (listed below).</p> <p>A short list of motions:     w - until the start of the next word, EXCLUDING its first character.     e - to the end of the current word, INCLUDING the last character.     $ - to the end of the line, INCLUDING the last character.</p> <p>Thus typing  de  will delete from the cursor to the end of the word.</p> <p>NOTE:  Pressing just the motion while in Normal mode without an operator will        move the cursor as specified.</p> <pre><code>             Lesson 2.4: USING A COUNT FOR A MOTION\n\n\n   ** Typing a number before a motion repeats it that many times. **\n\n  1. Move the cursor to the start of the line below marked ---&gt;.\n\n  2. Type  2w  to move the cursor two words forward.\n\n  3. Type  3e  to move the cursor to the end of the third word forward.\n\n  4. Type  0  (zero) to move to the start of the line.\n\n  5. Repeat steps 2 and 3 with different numbers.\n\n---&gt; This is just a line with words you can move around in.\n\n  6. Move on to lesson 2.5.\n\n\n\n\n</code></pre> <pre><code>         Lesson 2.5: USING A COUNT TO DELETE MORE\n</code></pre> <p>** Typing a number with an operator repeats it that many times. **</p> <p>In the combination of the delete operator and a motion mentioned above you   insert a count before the motion to delete more:      d   number   motion</p> <ol> <li> <p>Move the cursor to the first UPPER CASE word in the line marked ---&gt;.</p> </li> <li> <p>Type  d2w  to delete the two UPPER CASE words.</p> </li> <li> <p>Repeat steps 1 and 2 with a different count to delete the consecutive      UPPER CASE words with one command.</p> </li> </ol> <p>---&gt;  this ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up.</p> <pre><code>             Lesson 2.6: OPERATING ON LINES\n\n\n           ** Type  dd   to delete a whole line. **\n\n  Due to the frequency of whole line deletion, the designers of Vi decided\n  it would be easier to simply type two d's to delete a line.\n\n  1. Move the cursor to the second line in the phrase below.\n  2. Type  dd  to delete the line.\n  3. Now move to the fourth line.\n  4. Type   2dd   to delete two lines.\n\n---&gt;  1)  Roses are red,\n---&gt;  2)  Mud is fun,\n---&gt;  3)  Violets are blue,\n---&gt;  4)  I have a car,\n---&gt;  5)  Clocks tell time,\n---&gt;  6)  Sugar is sweet\n---&gt;  7)  And so are you.\n\nDoubling to operate on a line also works for operators mentioned below.\n\n</code></pre> <pre><code>         Lesson 2.7: THE UNDO COMMAND\n</code></pre> <p>** Press  u  to undo the last commands,   U  to fix a whole line. **</p> <ol> <li>Move the cursor to the line below marked ---&gt; and place it on the      first error.</li> <li>Type  x  to delete the first unwanted character.</li> <li>Now type  u  to undo the last command executed.</li> <li>This time fix all the errors on the line using the  x  command.</li> <li>Now type a capital  U  to return the line to its original state.</li> <li>Now type  u  a few times to undo the  U  and preceding commands.</li> <li>Now type CTRL-R (keeping CTRL key pressed while hitting R) a few times      to redo the commands (undo the undos).</li> </ol> <p>---&gt; Fiix the errors oon thhis line and reeplace them witth undo.</p> <ol> <li>These are very useful commands.  Now move on to the lesson 2 Summary.</li> </ol> <pre><code>                   Lesson 2 SUMMARY\n\n  1. To delete from the cursor up to the next word type:        dw\n  2. To delete from the cursor up to the end of the word type:  de\n  3. To delete from the cursor to the end of a line type:       d$\n  4. To delete a whole line type:                               dd\n\n  5. To repeat a motion prepend it with a number:   2w\n  6. The format for a change command is:\n               operator   [number]   motion\n     where:\n       operator - is what to do, such as  d  for delete\n       [number] - is an optional count to repeat the motion\n       motion   - moves over the text to operate on, such as  w (word),\n          e (end of word),  $ (end of the line), etc.\n\n  7. To move to the start of the line use a zero:  0\n\n  8. To undo previous actions, type:           u  (lowercase u)\n     To undo all the changes on a line, type:  U  (capital U)\n     To undo the undos, type:                  CTRL-R\n\n</code></pre> <pre><code>         Lesson 3.1: THE PUT COMMAND\n\n\n   ** Type  p  to put previously deleted text after the cursor. **\n</code></pre> <ol> <li> <p>Move the cursor to the first line below marked ---&gt;.</p> </li> <li> <p>Type  dd  to delete the line and store it in a Vim register.</p> </li> <li> <p>Move the cursor to the c) line, ABOVE where the deleted line should go.</p> </li> <li> <p>Type   p   to put the line below the cursor.</p> </li> <li> <p>Repeat steps 2 through 4 to put all the lines in correct order.</p> </li> </ol> <p>---&gt; d) Can you learn too? ---&gt; b) Violets are blue, ---&gt; c) Intelligence is learned, ---&gt; a) Roses are red,</p> <pre><code>               Lesson 3.2: THE REPLACE COMMAND\n\n\n       ** Type  rx  to replace the character at the cursor with  x . **\n\n  1. Move the cursor to the first line below marked ---&gt;.\n\n  2. Move the cursor so that it is on top of the first error.\n\n  3. Type   r   and then the character which should be there.\n\n  4. Repeat steps 2 and 3 until the first line is equal to the second one.\n\n---&gt;  Whan this lime was tuoed in, someone presswd some wrojg keys!\n---&gt;  When this line was typed in, someone pressed some wrong keys!\n\n  5. Now move on to lesson 3.3.\n\nNOTE: Remember that you should be learning by doing, not memorization.\n\n\n\n</code></pre> <pre><code>        Lesson 3.3: THE CHANGE OPERATOR\n\n\n   ** To change until the end of a word, type  ce . **\n</code></pre> <ol> <li> <p>Move the cursor to the first line below marked ---&gt;.</p> </li> <li> <p>Place the cursor on the  u  in  lubw.</p> </li> <li> <p>Type  ce  and the correct word (in this case, type  ine ).</p> </li> <li> <p>Press  and move to the next character that needs to be changed. <li> <p>Repeat steps 3 and 4 until the first sentence is the same as the second.</p> </li> <p>---&gt; This lubw has a few wptfd that mrrf changing usf the change operator. ---&gt; This line has a few words that need changing using the change operator.</p> <p>Notice that  ce  deletes the word and places you in Insert mode.              cc  does the same for the whole line.</p> <pre><code>               Lesson 3.4: MORE CHANGES USING c\n\n\n     ** The change operator is used with the same motions as delete. **\n\n  1. The change operator works in the same way as delete.  The format is:\n\n         c    [number]   motion\n\n  2. The motions are the same, such as   w (word) and  $ (end of line).\n\n  3. Move the cursor to the first line below marked ---&gt;.\n\n  4. Move the cursor to the first error.\n\n  5. Type  c$  and type the rest of the line like the second and press &lt;ESC&gt;.\n\n---&gt; The end of this line needs some help to make it like the second.\n---&gt; The end of this line needs to be corrected using the  c$  command.\n\nNOTE:  You can use the Backspace key to correct mistakes while typing.\n\n</code></pre> <pre><code>               Lesson 3 SUMMARY\n</code></pre> <ol> <li> <p>To put back text that has just been deleted, type   p .  This puts the      deleted text AFTER the cursor (if a line was deleted it will go on the      line below the cursor).</p> </li> <li> <p>To replace the character under the cursor, type   r   and then the      character you want to have there.</p> </li> <li> <p>The change operator allows you to change from the cursor to where the      motion takes you.  eg. Type  ce  to change from the cursor to the end of      the word,  c$  to change to the end of a line.</p> </li> <li> <p>The format for change is:</p> <p>c   [number]   motion</p> </li> </ol> <p>Now go on to the next lesson.</p> <pre><code>          Lesson 4.1: CURSOR LOCATION AND FILE STATUS\n\n  ** Type CTRL-G to show your location in the file and the file status.\n     Type  G  to move to a line in the file. **\n\n  NOTE: Read this entire lesson before executing any of the steps!!\n\n  1. Hold down the Ctrl key and press  g .  We call this CTRL-G.\n     A message will appear at the bottom of the page with the filename and the\n     position in the file.  Remember the line number for Step 3.\n\nNOTE:  You may see the cursor position in the lower right corner of the screen\n       This happens when the 'ruler' option is set (see  :help 'ruler'  )\n\n  2. Press  G  to move you to the bottom of the file.\n     Type  gg  to move you to the start of the file.\n\n  3. Type the number of the line you were on and then  G .  This will\n     return you to the line you were on when you first pressed CTRL-G.\n\n  4. If you feel confident to do this, execute steps 1 through 3.\n\n</code></pre> <pre><code>        Lesson 4.2: THE SEARCH COMMAND\n\n\n ** Type  /  followed by a phrase to search for the phrase. **\n</code></pre> <ol> <li> <p>In Normal mode type the  /  character.  Notice that it and the cursor      appear at the bottom of the screen as with the  :  command.</p> </li> <li> <p>Now type 'errroor' .  This is the word you want to search for. <li> <p>To search for the same phrase again, simply type  n .      To search for the same phrase in the opposite direction, type  N .</p> </li> <li> <p>To search for a phrase in the backward direction, use  ?  instead of  / .</p> </li> <li> <p>To go back to where you came from press  CTRL-O  (Keep Ctrl down while      pressing the letter o).  Repeat to go back further.  CTRL-I goes forward.</p> </li> <p>---&gt;  \"errroor\" is not the way to spell error;  errroor is an error. NOTE: When the search reaches the end of the file it will continue at the       start, unless the 'wrapscan' option has been reset.</p> <pre><code>           Lesson 4.3: MATCHING PARENTHESES SEARCH\n\n\n          ** Type  %  to find a matching ),], or } . **\n\n  1. Place the cursor on any (, [, or { in the line below marked ---&gt;.\n\n  2. Now type the  %  character.\n\n  3. The cursor will move to the matching parenthesis or bracket.\n\n  4. Type  %  to move the cursor to the other matching bracket.\n\n  5. Move the cursor to another (,),[,],{ or } and see what  %  does.\n\n---&gt; This ( is a test line with ('s, ['s ] and {'s } in it. ))\n\n\nNOTE: This is very useful in debugging a program with unmatched parentheses!\n\n\n\n</code></pre> <pre><code>          Lesson 4.4: THE SUBSTITUTE COMMAND\n\n\n** Type  :s/old/new/g  to substitute 'new' for 'old'. **\n</code></pre> <ol> <li> <p>Move the cursor to the line below marked ---&gt;.</p> </li> <li> <p>Type  :s/thee/the   .  Note that this command only changes the      first occurrence of \"thee\" in the line. <li> <p>Now type  :s/thee/the/g .  Adding the  g  flag means to substitute      globally in the line, change all occurrences of \"thee\" in the line.</p> </li> <p>---&gt; thee best time to see thee flowers is in thee spring.</p> <ol> <li>To change every occurrence of a character string between two lines,      type   :#,#s/old/new/g    where #,# are the line numbers of the range                                of lines where the substitution is to be done.      Type   :%s/old/new/g      to change every occurrence in the whole file.      Type   :%s/old/new/gc     to find every occurrence in the whole file,                        with a prompt whether to substitute or not.</li> </ol> <pre><code>                   Lesson 4 SUMMARY\n\n\n  1. CTRL-G  displays your location in the file and the file status.\n             G  moves to the end of the file.\n     number  G  moves to that line number.\n            gg  moves to the first line.\n\n  2. Typing  /  followed by a phrase searches FORWARD for the phrase.\n     Typing  ?  followed by a phrase searches BACKWARD for the phrase.\n     After a search type  n  to find the next occurrence in the same direction\n     or  N  to search in the opposite direction.\n     CTRL-O takes you back to older positions, CTRL-I to newer positions.\n\n  3. Typing  %  while the cursor is on a (,),[,],{, or } goes to its match.\n\n  4. To substitute new for the first old in a line type    :s/old/new\n     To substitute new for all 'old's on a line type       :s/old/new/g\n     To substitute phrases between two line #'s type       :#,#s/old/new/g\n     To substitute all occurrences in the file type    :%s/old/new/g\n     To ask for confirmation each time add 'c'         :%s/old/new/gc\n\n</code></pre> <pre><code>    Lesson 5.1: HOW TO EXECUTE AN EXTERNAL COMMAND\n</code></pre> <p>** Type  :!  followed by an external command to execute that command. **</p> <ol> <li> <p>Type the familiar command  :  to set the cursor at the bottom of the      screen.  This allows you to enter a command-line command.</p> </li> <li> <p>Now type the  !  (exclamation point) character.  This allows you to      execute any external shell command.</p> </li> <li> <p>As an example type   ls   following the ! and then hit .  This      will show you a listing of your directory, just as if you were at the      shell prompt.  Or use  :!dir  if ls doesn't work. <p>NOTE:  It is possible to execute any external command this way, also with        arguments.</p> <p>NOTE:  All  :  commands must be finished by hitting         From here on we will not always mention it. <pre><code>              Lesson 5.2: MORE ON WRITING FILES\n\n\n     ** To save the changes made to the text, type  :w FILENAME  **\n\n  1. Type  :!dir  or  :!ls  to get a listing of your directory.\n     You already know you must hit &lt;ENTER&gt; after this.\n\n  2. Choose a filename that does not exist yet, such as TEST.\n\n  3. Now type:   :w TEST   (where TEST is the filename you chose.)\n\n  4. This saves the whole file (the Vim Tutor) under the name TEST.\n     To verify this, type    :!dir  or  :!ls   again to see your directory.\n\nNOTE: If you were to exit Vim and start it again with  vim TEST , the file\n      would be an exact copy of the tutor when you saved it.\n\n  5. Now remove the file by typing (Windows):   :!del TEST\n                or (Unix):  :!rm TEST\n\n\n</code></pre> <pre><code>        Lesson 5.3: SELECTING TEXT TO WRITE\n\n\n** To save part of the file, type  v  motion  :w FILENAME **\n</code></pre> <ol> <li> <p>Move the cursor to this line.</p> </li> <li> <p>Press  v  and move the cursor to the fifth item below.  Notice that the      text is highlighted.</p> </li> <li> <p>Press the  :  character.  At the bottom of the screen  :'&lt;,'&gt; will appear.</p> </li> <li> <p>Type  w TEST  , where TEST is a filename that does not exist yet.  Verify      that you see  :'&lt;,'&gt;w TEST  before you press . <li> <p>Vim will write the selected lines to the file TEST.  Use  :!dir  or  :!ls      to see it.  Do not remove it yet!  We will use it in the next lesson.</p> </li> <p>NOTE:  Pressing  v  starts Visual selection.  You can move the cursor around        to make the selection bigger or smaller.  Then you can use an operator        to do something with the text.  For example,  d  deletes the text.</p> <pre><code>           Lesson 5.4: RETRIEVING AND MERGING FILES\n\n\n       ** To insert the contents of a file, type  :r FILENAME  **\n\n  1. Place the cursor just above this line.\n\nNOTE:  After executing Step 2 you will see text from lesson 5.3.  Then move\n       DOWN to see this lesson again.\n\n  2. Now retrieve your TEST file using the command   :r TEST   where TEST is\n     the name of the file you used.\n     The file you retrieve is placed below the cursor line.\n\n  3. To verify that a file was retrieved, cursor back and notice that there\n     are now two copies of lesson 5.3, the original and the file version.\n\nNOTE:  You can also read the output of an external command.  For example,\n       :r !ls  reads the output of the ls command and puts it below the\n       cursor.\n\n\n</code></pre> <pre><code>               Lesson 5 SUMMARY\n</code></pre> <ol> <li> <p>:!command  executes an external command.</p> <p>Some useful examples are:  (Windows)    (Unix)   :!dir        :!ls        -  shows a directory listing.   :!del FILENAME   :!rm FILENAME   -  removes file FILENAME.</p> </li> <li> <p>:w FILENAME  writes the current Vim file to disk with name FILENAME.</p> </li> <li> <p>v  motion  :w FILENAME  saves the Visually selected lines in file       FILENAME.</p> </li> <li> <p>:r FILENAME  retrieves disk file FILENAME and puts it below the       cursor position.</p> </li> <li> <p>:r !dir  reads the output of the dir command and puts it below the       cursor position.</p> </li> </ol> <pre><code>             Lesson 6.1: THE OPEN COMMAND\n\n\n ** Type  o  to open a line below the cursor and place you in Insert mode. **\n\n  1. Move the cursor to the first line below marked ---&gt;.\n\n  2. Type the lowercase letter  o  to open up a line BELOW the cursor and place\n     you in Insert mode.\n\n  3. Now type some text and press &lt;ESC&gt; to exit Insert mode.\n\n---&gt; After typing  o  the cursor is placed on the open line in Insert mode.\n\n  4. To open up a line ABOVE the cursor, simply type a capital  O , rather\n     than a lowercase  o.  Try this on the line below.\n\n---&gt; Open up a line above this by typing O while the cursor is on this line.\n\n\n\n\n</code></pre> <pre><code>        Lesson 6.2: THE APPEND COMMAND\n\n\n     ** Type  a  to insert text AFTER the cursor. **\n</code></pre> <ol> <li> <p>Move the cursor to the start of the first line below marked ---&gt;.</p> </li> <li> <p>Press  e  until the cursor is on the end of  li .</p> </li> <li> <p>Type an  a  (lowercase) to append text AFTER the cursor.</p> </li> <li> <p>Complete the word like the line below it.  Press  to exit Insert      mode. <li> <p>Use  e  to move to the next incomplete word and repeat steps 3 and 4.</p> </li> <p>---&gt; This li will allow you to pract appendi text to a line. ---&gt; This line will allow you to practice appending text to a line.</p> <p>NOTE:  a, i and A all go to the same Insert mode, the only difference is where        the characters are inserted.</p> <pre><code>            Lesson 6.3: ANOTHER WAY TO REPLACE\n\n\n      ** Type a capital  R  to replace more than one character. **\n\n  1. Move the cursor to the first line below marked ---&gt;.  Move the cursor to\n     the beginning of the first  xxx .\n\n  2. Now press  R  and type the number below it in the second line, so that it\n     replaces the xxx .\n\n  3. Press &lt;ESC&gt; to leave Replace mode.  Notice that the rest of the line\n     remains unmodified.\n\n  4. Repeat the steps to replace the remaining xxx.\n\n---&gt; Adding 123 to xxx gives you xxx.\n---&gt; Adding 123 to 456 gives you 579.\n\nNOTE:  Replace mode is like Insert mode, but every typed character deletes an\n       existing character.\n\n</code></pre> <pre><code>        Lesson 6.4: COPY AND PASTE TEXT\n\n\n  ** Use the  y  operator to copy text and  p  to paste it **\n</code></pre> <ol> <li> <p>Move to the line below marked ---&gt; and place the cursor after \"a)\".</p> </li> <li> <p>Start Visual mode with  v  and move the cursor to just before \"first\".</p> </li> <li> <p>Type  y  to yank (copy) the highlighted text.</p> </li> <li> <p>Move the cursor to the end of the next line:  j$</p> </li> <li> <p>Type  p  to put (paste) the text.  Then type:  a second  . <li> <p>Use Visual mode to select \" item.\", yank it with  y , move to the end of      the next line with  j$  and put the text there with  p .</p> </li> <p>---&gt;  a) this is the first item.       b)</p> <p>NOTE: You can also use  y  as an operator:  yw  yanks one word,         yy  yanks the whole line, then  p  puts that line.</p> <pre><code>                Lesson 6.5: SET OPTION\n\n\n      ** Set an option so a search or substitute ignores case **\n\n  1. Search for 'ignore' by entering:  /ignore &lt;ENTER&gt;\n     Repeat several times by pressing  n .\n\n  2. Set the 'ic' (Ignore case) option by entering:   :set ic\n\n  3. Now search for 'ignore' again by pressing  n\n     Notice that Ignore and IGNORE are now also found.\n\n  4. Set the 'hlsearch' and 'incsearch' options:  :set hls is\n\n  5. Now type the search command again and see what happens:  /ignore &lt;ENTER&gt;\n\n  6. To disable ignoring case enter:  :set noic\n\nNOTE:  To remove the highlighting of matches enter:   :nohlsearch\nNOTE:  If you want to ignore case for just one search command, use  \\c\n       in the phrase:  /ignore\\c &lt;ENTER&gt;\n</code></pre> <pre><code>               Lesson 6 SUMMARY\n</code></pre> <ol> <li> <p>Type  o  to open a line BELOW the cursor and start Insert mode.      Type  O  to open a line ABOVE the cursor.</p> </li> <li> <p>Type  a  to insert text AFTER the cursor.      Type  A  to insert text after the end of the line.</p> </li> <li> <p>The  e  command moves to the end of a word.</p> </li> <li> <p>The  y  operator yanks (copies) text,  p  puts (pastes) it.</p> </li> <li> <p>Typing a capital  R  enters Replace mode until    is pressed. <li> <p>Typing \":set xxx\" sets the option \"xxx\".  Some options are:     'ic' 'ignorecase'   ignore upper/lower case when searching     'is' 'incsearch'    show partial matches for a search phrase     'hls' 'hlsearch'    highlight all matching phrases      You can either use the long or the short option name.</p> </li> <li> <p>Prepend \"no\" to switch an option off:   :set noic</p> </li> <pre><code>               Lesson 7.1: GETTING HELP\n\n\n              ** Use the on-line help system **\n\n  Vim has a comprehensive on-line help system.  To get started, try one of\n  these three:\n    - press the &lt;HELP&gt; key (if you have one)\n    - press the &lt;F1&gt; key (if you have one)\n    - type   :help &lt;ENTER&gt;\n\n  Read the text in the help window to find out how the help works.\n  Type  CTRL-W CTRL-W   to jump from one window to another.\n  Type    :q &lt;ENTER&gt;    to close the help window.\n\n  You can find help on just about any subject, by giving an argument to the\n  \":help\" command.  Try these (don't forget pressing &lt;ENTER&gt;):\n\n    :help w\n    :help c_CTRL-D\n    :help insert-index\n    :help user-manual\n</code></pre> <pre><code>          Lesson 7.2: CREATE A STARTUP SCRIPT\n\n\n          ** Enable Vim features **\n</code></pre> <p>Vim has many more features than Vi, but most of them are disabled by   default.  To start using more features you should create a \"vimrc\" file.</p> <ol> <li> <p>Start editing the \"vimrc\" file.  This depends on your system:     :e ~/.vimrc     for Unix     :e ~/_vimrc     for Windows</p> </li> <li> <p>Now read the example \"vimrc\" file contents:     :r $VIMRUNTIME/vimrc_example.vim</p> </li> <li> <p>Write the file with:     :w</p> </li> </ol> <p>The next time you start Vim it will use syntax highlighting.   You can add all your preferred settings to this \"vimrc\" file.   For more information type  :help vimrc-intro</p> <pre><code>                 Lesson 7.3: COMPLETION\n\n\n          ** Command line completion with CTRL-D and &lt;TAB&gt; **\n\n  1. Make sure Vim is not in compatible mode:  :set nocp\n\n  2. Look what files exist in the directory:  :!ls   or  :!dir\n\n  3. Type the start of a command:  :e\n\n  4. Press  CTRL-D  and Vim will show a list of commands that start with \"e\".\n\n  5. Type  d&lt;TAB&gt;  and Vim will complete the command name to \":edit\".\n\n  6. Now add a space and the start of an existing file name:  :edit FIL\n\n  7. Press &lt;TAB&gt;.  Vim will complete the name (if it is unique).\n\nNOTE:  Completion works for many commands.  Just try pressing CTRL-D and\n       &lt;TAB&gt;.  It is especially useful for  :help .\n\n</code></pre> <pre><code>               Lesson 7 SUMMARY\n</code></pre> <ol> <li> <p>Type  :help  or press  or   to open a help window. <li> <p>Type  :help cmd  to find help on  cmd .</p> </li> <li> <p>Type  CTRL-W CTRL-W  to jump to another window.</p> </li> <li> <p>Type  :q  to close the help window.</p> </li> <li> <p>Create a vimrc startup script to keep your preferred settings.</p> </li> <li> <p>When typing a  :  command, press CTRL-D to see possible completions.      Press  to use one completion. <pre><code>\n  This concludes the Vim Tutor.  It was intended to give a brief overview of\n  the Vim editor, just enough to allow you to use the editor fairly easily.\n  It is far from complete as Vim has many many more commands.  Read the user\n  manual next: \":help user-manual\".\n\n  For further reading and studying, this book is recommended:\n    Vim - Vi Improved - by Steve Oualline\n    Publisher: New Riders\n  The first book completely dedicated to Vim.  Especially useful for beginners.\n  There are many examples and pictures.\n  See https://iccf-holland.org/click5.html\n\n  This book is older and more about Vi than Vim, but also recommended:\n    Learning the Vi Editor - by Linda Lamb\n    Publisher: O'Reilly &amp; Associates Inc.\n  It is a good book to get to know almost anything you want to do with Vi.\n  The sixth edition also includes information on Vim.\n\n  This tutorial was written by Michael C. Pierce and Robert K. Ware,\n  Colorado School of Mines using ideas supplied by Charles Smith,\n  Colorado State University.  E-mail: bware@mines.colorado.edu.\n\n  Modified for Vim by Bram Moolenaar.\n\n</code></pre>"}]}